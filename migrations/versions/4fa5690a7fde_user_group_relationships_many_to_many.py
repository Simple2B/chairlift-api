"""User Group Relationships many to many

Revision ID: 4fa5690a7fde
Revises: 96243071b08f
Create Date: 2022-10-18 20:41:20.055559

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4fa5690a7fde'
down_revision = '96243071b08f'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('firmware',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('model', sa.String(length=128), nullable=True),
    sa.Column('hardware', sa.String(length=256), nullable=True),
    sa.Column('hash', sa.String(length=256), nullable=True),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('data', sa.LargeBinary(), nullable=True),
    sa.Column('bin', sa.LargeBinary(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('upload_id', sa.Integer(), nullable=True),
    sa.Column('sensor_name', sa.String(length=128), nullable=True),
    sa.Column('sensor_location_x', sa.Float(), nullable=True),
    sa.Column('sensor_location_y', sa.Float(), nullable=True),
    sa.Column('config', sa.String(length=256), nullable=True),
    sa.Column('health', sa.String(length=256), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sensor_sensor_name'), 'sensor', ['sensor_name'], unique=False)
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=False),
    sa.Column('email', sa.String(length=128), nullable=False),
    sa.Column('password_hash', sa.String(length=256), nullable=False),
    sa.Column('picture', sa.String(length=256), nullable=True),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('role', sa.Enum('Admin', 'Owner', 'Client', 'NoneUser', name='role'), nullable=True),
    sa.Column('google_openid_key', sa.String(length=256), nullable=True),
    sa.Column('apple_openid_key', sa.String(length=256), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=256), nullable=True),
    sa.Column('group_owner', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['group_owner'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('raw_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('upload_id', sa.Integer(), nullable=True),
    sa.Column('sensor_id', sa.Integer(), nullable=True),
    sa.Column('blob', sa.String(length=256), nullable=True),
    sa.Column('added_at', sa.DateTime(), nullable=True),
    sa.Column('parsed', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensor.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('api_key',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=256), nullable=True),
    sa.Column('sensor_role', sa.Enum('Admin', 'Owner', 'Client', 'NoneUser', name='role'), nullable=True),
    sa.Column('group_role', sa.Enum('Admin', 'Owner', 'Client', 'NoneUser', name='role'), nullable=True),
    sa.Column('key_hash', sa.String(length=256), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('group_invite_code',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('invite_code', sa.String(length=256), nullable=True),
    sa.Column('expiration_date', sa.DateTime(), nullable=True),
    sa.Column('invitation_date', sa.DateTime(), nullable=True),
    sa.Column('group_role', sa.Enum('Admin', 'Owner', 'Client', 'NoneUser', name='role'), nullable=True),
    sa.Column('sensor_role', sa.Enum('Admin', 'Owner', 'Client', 'NoneUser', name='role'), nullable=True),
    sa.Column('email', sa.String(length=128), nullable=True),
    sa.Column('invited_by_user', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.ForeignKeyConstraint(['invited_by_user'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('data_id', sa.Integer(), nullable=True),
    sa.Column('sensor_id', sa.String(length=256), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('power_current', sa.Float(precision=3), nullable=True),
    sa.Column('power_voltage', sa.Float(precision=3), nullable=True),
    sa.Column('tmp_temp', sa.Float(precision=3), nullable=True),
    sa.Column('snodar_distance', sa.Float(precision=3), nullable=True),
    sa.Column('seosonal_snowfall', sa.Float(precision=3), nullable=True),
    sa.Column('seosonal_snowdepth', sa.Float(precision=3), nullable=True),
    sa.Column('new_snowfall', sa.Float(precision=3), nullable=True),
    sa.Column('doy_swe', sa.Float(precision=3), nullable=True),
    sa.Column('temp_swe', sa.Float(precision=3), nullable=True),
    sa.Column('health', sa.LargeBinary(), nullable=True),
    sa.ForeignKeyConstraint(['data_id'], ['raw_data.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor_group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sensor_id', sa.Integer(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('edit_roles', sa.Enum('Admin', 'Owner', 'Client', 'NoneUser', name='role'), nullable=True),
    sa.Column('view_roles', sa.Enum('Admin', 'Owner', 'Client', 'NoneUser', name='role'), nullable=True),
    sa.Column('share_roles', sa.Enum('Admin', 'Owner', 'Client', 'NoneUser', name='role'), nullable=True),
    sa.Column('joined_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensor.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sensor_key',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sensor_id', sa.Integer(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('key_hash', sa.String(length=256), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.ForeignKeyConstraint(['sensor_id'], ['sensor.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('sensor_role', sa.Enum('Admin', 'Owner', 'Client', 'NoneUser', name='role'), nullable=True),
    sa.Column('group_role', sa.Enum('Admin', 'Owner', 'Client', 'NoneUser', name='role'), nullable=True),
    sa.Column('joined_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('api_keys_domain',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key_id', sa.Integer(), nullable=True),
    sa.Column('domain', sa.String(length=256), nullable=True),
    sa.ForeignKeyConstraint(['key_id'], ['api_key.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey')
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.drop_table('api_keys_domain')
    op.drop_table('user_group')
    op.drop_table('sensor_key')
    op.drop_table('sensor_group')
    op.drop_table('sensor_data')
    op.drop_table('group_invite_code')
    op.drop_table('api_key')
    op.drop_table('raw_data')
    op.drop_table('group')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_sensor_sensor_name'), table_name='sensor')
    op.drop_table('sensor')
    op.drop_table('firmware')
    # ### end Alembic commands ###
